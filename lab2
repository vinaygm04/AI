{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNOX2x2GK7Zj81FdRWCj9pU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vinaygm04/AI/blob/main/AI_LAb.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "abp62N6lwxtg",
        "outputId": "d0594d94-cf0e-44fd-c4b2-2dafba5b3fd7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the initial 3x3 puzzle state row-wise (use 0 for empty):\n",
            "Row 1: 1 2 3\n",
            "Row 2: 7 4 6\n",
            "Row 3: 0 5 8\n",
            "Enter the goal 3x3 puzzle state row-wise (use 0 for empty):\n",
            "Row 1: 1 2 3\n",
            "Row 2: 8 0 4\n",
            "Row 3: 7 6  5\n",
            "\n",
            "Initial State:\n",
            "1 2 3\n",
            "7 4 6\n",
            "0 5 8\n",
            "\n",
            "Goal State:\n",
            "1 2 3\n",
            "8 0 4\n",
            "7 6 5\n",
            "\n",
            "Step 0: Heuristic = 5\n",
            "1 2 3\n",
            "7 4 6\n",
            "0 5 8\n",
            "\n",
            "Step 1: Heuristic = 4\n",
            "1 2 3\n",
            "0 4 6\n",
            "7 5 8\n",
            "\n",
            "Final State:\n",
            "1 2 3\n",
            "0 4 6\n",
            "7 5 8\n",
            "\n",
            "Heuristic (misplaced tiles): 4\n",
            "Stopped at local minimum; goal not reached.\n"
          ]
        }
      ],
      "source": [
        "import copy\n",
        "import time\n",
        "\n",
        "def heuristic(state, goal_state):\n",
        "    \"\"\"Number of misplaced tiles compared to goal\"\"\"\n",
        "    misplaced = 0\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] != 0 and state[i][j] != goal_state[i][j]:\n",
        "                misplaced += 1\n",
        "    return misplaced\n",
        "\n",
        "def find_zero(state):\n",
        "    \"\"\"Find position of empty tile (0)\"\"\"\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] == 0:\n",
        "                return i, j\n",
        "\n",
        "def get_neighbors(state):\n",
        "    \"\"\"Generate neighbor states by sliding tiles\"\"\"\n",
        "    neighbors = []\n",
        "    x, y = find_zero(state)\n",
        "    moves = [(1,0), (-1,0), (0,1), (0,-1)]  # down, up, right, left\n",
        "\n",
        "    for dx, dy in moves:\n",
        "        nx, ny = x + dx, y + dy\n",
        "        if 0 <= nx < 3 and 0 <= ny < 3:\n",
        "            new_state = copy.deepcopy(state)\n",
        "            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]\n",
        "            neighbors.append(new_state)\n",
        "    return neighbors\n",
        "\n",
        "def print_state(state):\n",
        "    for row in state:\n",
        "        print(' '.join(str(num) for num in row))\n",
        "    print()\n",
        "\n",
        "def hill_climbing(start_state, goal_state):\n",
        "    current_state = start_state\n",
        "    current_heuristic = heuristic(current_state, goal_state)\n",
        "    step = 0\n",
        "\n",
        "    print(f\"Step {step}: Heuristic = {current_heuristic}\")\n",
        "    print_state(current_state)\n",
        "    time.sleep(0.5)  # Pause for readability (optional)\n",
        "\n",
        "    while True:\n",
        "        neighbors = get_neighbors(current_state)\n",
        "        neighbor_heuristics = [(heuristic(n, goal_state), n) for n in neighbors]\n",
        "\n",
        "        best_heuristic, best_neighbor = min(neighbor_heuristics, key=lambda x: x[0])\n",
        "\n",
        "        if best_heuristic >= current_heuristic:\n",
        "            # No better neighbors â€” stop\n",
        "            break\n",
        "\n",
        "        current_state = best_neighbor\n",
        "        current_heuristic = best_heuristic\n",
        "        step += 1\n",
        "\n",
        "        print(f\"Step {step}: Heuristic = {current_heuristic}\")\n",
        "        print_state(current_state)\n",
        "        time.sleep(0.5)  # Pause for readability (optional)\n",
        "\n",
        "        if current_heuristic == 0:\n",
        "            # Goal reached\n",
        "            break\n",
        "\n",
        "    return current_state, current_heuristic\n",
        "\n",
        "def get_user_input(prompt):\n",
        "    print(f\"Enter the {prompt} 3x3 puzzle state row-wise (use 0 for empty):\")\n",
        "    state = []\n",
        "    for i in range(3):\n",
        "        while True:\n",
        "            row = input(f\"Row {i+1}: \").strip().split()\n",
        "            if len(row) == 3 and all(x.isdigit() for x in row):\n",
        "                row_nums = list(map(int, row))\n",
        "                if all(0 <= x <= 8 for x in row_nums):\n",
        "                    state.append(row_nums)\n",
        "                    break\n",
        "            print(\"Invalid input. Enter exactly 3 numbers between 0 and 8 separated by spaces.\")\n",
        "    return state\n",
        "\n",
        "# Main execution\n",
        "initial_state = get_user_input(\"initial\")\n",
        "goal_state = get_user_input(\"goal\")\n",
        "\n",
        "print(\"\\nInitial State:\")\n",
        "print_state(initial_state)\n",
        "\n",
        "print(\"Goal State:\")\n",
        "print_state(goal_state)\n",
        "\n",
        "final_state, h = hill_climbing(initial_state, goal_state)\n",
        "\n",
        "print(\"Final State:\")\n",
        "print_state(final_state)\n",
        "print(f\"Heuristic (misplaced tiles): {h}\")\n",
        "\n",
        "if h == 0:\n",
        "    print(\"Goal state reached!\")\n",
        "else:\n",
        "    print(\"Stopped at local minimum; goal not reached.\")\n"
      ]
    }
  ]
}
